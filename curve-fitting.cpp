/*#include<ceres/ceres.h>
#include<glog/logging.h>

const double data[] = { 0,1.100999394535328,
0.075000000000000  , 2.018186120768374,
0.150000000000000 ,  1.591595312104853,
0.225000000000000  , 1.410038367650841,
0.300000000000000   ,0.709872297020351,
0.375000000000000,   1.325031499910806,
0.450000000000000,   0.985281193570677,
0.525000000000000 ,  1.242680775004155,
0.600000000000000 ,  1.356010627001183,
0.675000000000000 ,  1.502784482182797,
0.750000000000000 ,  1.329421256100170,
0.825000000000000 ,  1.730784339923899,
0.900000000000000 ,  1.351547184307555,
0.975000000000000 ,  1.546180289446977,
1.050000000000000 ,  1.647317564817567,
1.125000000000000 ,  1.565868017178365,
1.200000000000000 ,  1.760264542070691,
1.275000000000000 ,  1.684762270211561,
1.350000000000000 ,  1.500156283728033,
1.425000000000000 ,  5.543,
1.500000000000000 ,  5.664,
1.575000000000000 ,  1.651787231749705,
1.650000000000000 ,  1.833702889422286,
1.725000000000000 ,  1.966919917083118,
1.800000000000000 ,  1.919200278651752,
1.875000000000000  , 1.758690123946148,
1.950000000000000  , 1.890228919046789,
2.025000000000000  , 2.003934641984652,
2.100000000000000  , 2.370872305974928,
2.175000000000000  , 1.950135999794334,
2.250000000000000   ,2.327525820641006,
2.325000000000000   ,2.281708653184285,
2.400000000000000 ,  2.223727829106575,
2.475000000000000 ,  2.110770589713798,
2.550000000000000 ,  2.318177895051879,
2.625000000000000 ,  2.411711374112427,
2.700000000000000 ,  2.190443518487546,
2.775000000000000 ,  2.579289826481649,
2.850000000000000 ,  2.434211927661487,
2.925000000000000 ,  2.638955303224051,
3.000000000000000 ,  2.785524496649893,
3.075000000000000 ,  3.599205612484856,
3.150000000000000  , 2.785747251410630,
3.225000000000001 ,  2.978112705707436,
3.300000000000000 ,  2.607102244062205,
3.375000000000000 ,  4.249148962347761,
3.450000000000000 ,  3.596065771893000,
3.525000000000000 ,  3.373848505047049,
3.600000000000001 ,  3.191219803887790,
3.675000000000000 ,  3.414152135032197,
3.750000000000000 ,  3.196969127088141,
3.825000000000000 ,  3.857201090405344,
3.900000000000000 ,  3.748993443025948,
3.975000000000000 ,  4.799349040053524,
4.050000000000001 ,  3.549576132859882,
4.125000000000000  , 3.873497648051128,
4.200000000000000 ,  3.784534444825034,
4.275000000000000 ,  3.922565429779472,
4.350000000000001 ,  3.961524757939090,
4.425000000000000 ,  3.963118768377439,
4.500000000000000 ,  4.081365397793952,
4.575000000000000 ,  4.318142364797311,
4.650000000000000 ,  4.119563736013304,
4.725000000000001 ,  4.682329023627858,
4.800000000000000 ,  4.641030613134533,
4.875000000000000 ,  4.910565248696436,
4.950000000000000 ,  4.933221106856053 };

const int NumObservations = 67;
using namespace ceres;
struct costFunc {
	costFunc(double x,double y):_x(x),_y(y){}
	template<typename T>
	bool operator()(const T* const m,const T* const c,T*residual)const
	{
		residual[0] = T(_y) - ceres::exp(m[0]*T(_x) + c[0]);
		return true;
	}

private:
	double _x;
	double _y;
};

int main(int argc,char **argv)
{
	google::InitGoogleLogging(argv[0]);
	double m = 0.0;
	double c = 0.0;
	Problem problem;
	for (int i = 0; i < NumObservations; i++)
	{
		CostFunction *costfunc = new AutoDiffCostFunction<costFunc,1,1,1>(new costFunc(data[2 * i], data[2 * i + 1]));
		problem.AddResidualBlock(costfunc, new CauchyLoss(0.5), &m, &c);
	}

	Solver::Options options;
	options.linear_solver_type = DENSE_QR;
	options.minimizer_progress_to_stdout = true;

	Solver::Summary summary;
	Solve(options, &problem, &summary);
	std::cout << summary.BriefReport() << "\n";
	std::cout << "final m:" << m << "final c:" << c;
	return 0;
}*/
